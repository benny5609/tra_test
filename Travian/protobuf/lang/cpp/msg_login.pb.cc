// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {
namespace login {

namespace {

const ::google::protobuf::Descriptor* smsg_auth_challenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_auth_challenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* cmsg_auth_session_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmsg_auth_session_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5flogin_2eproto() {
  protobuf_AddDesc_msg_5flogin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_login.proto");
  GOOGLE_CHECK(file != NULL);
  smsg_auth_challenge_descriptor_ = file->message_type(0);
  static const int smsg_auth_challenge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_auth_challenge, svrseed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_auth_challenge, svrtime_),
  };
  smsg_auth_challenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_auth_challenge_descriptor_,
      smsg_auth_challenge::default_instance_,
      smsg_auth_challenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_auth_challenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_auth_challenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_auth_challenge));
  cmsg_auth_session_descriptor_ = file->message_type(1);
  static const int cmsg_auth_session_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_auth_session, clientbuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_auth_session, clientseed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_auth_session, clienttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_auth_session, account_),
  };
  cmsg_auth_session_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmsg_auth_session_descriptor_,
      cmsg_auth_session::default_instance_,
      cmsg_auth_session_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_auth_session, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_auth_session, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmsg_auth_session));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5flogin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_auth_challenge_descriptor_, &smsg_auth_challenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmsg_auth_session_descriptor_, &cmsg_auth_session::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5flogin_2eproto() {
  delete smsg_auth_challenge::default_instance_;
  delete smsg_auth_challenge_reflection_;
  delete cmsg_auth_session::default_instance_;
  delete cmsg_auth_session_reflection_;
}

void protobuf_AddDesc_msg_5flogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017msg_login.proto\022\016protocol.login\"7\n\023sms"
    "g_auth_challenge\022\017\n\007svrSeed\030\001 \002(\014\022\017\n\007svr"
    "Time\030\002 \001(\r\"`\n\021cmsg_auth_session\022\022\n\nclien"
    "tBuid\030\001 \002(\r\022\022\n\nclientSeed\030\002 \002(\014\022\022\n\nclien"
    "tTime\030\003 \001(\r\022\017\n\007account\030\004 \002(\014", 188);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_login.proto", &protobuf_RegisterTypes);
  smsg_auth_challenge::default_instance_ = new smsg_auth_challenge();
  cmsg_auth_session::default_instance_ = new cmsg_auth_session();
  smsg_auth_challenge::default_instance_->InitAsDefaultInstance();
  cmsg_auth_session::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5flogin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5flogin_2eproto {
  StaticDescriptorInitializer_msg_5flogin_2eproto() {
    protobuf_AddDesc_msg_5flogin_2eproto();
  }
} static_descriptor_initializer_msg_5flogin_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int smsg_auth_challenge::kSvrSeedFieldNumber;
const int smsg_auth_challenge::kSvrTimeFieldNumber;
#endif  // !_MSC_VER

smsg_auth_challenge::smsg_auth_challenge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void smsg_auth_challenge::InitAsDefaultInstance() {
}

smsg_auth_challenge::smsg_auth_challenge(const smsg_auth_challenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void smsg_auth_challenge::SharedCtor() {
  _cached_size_ = 0;
  svrseed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svrtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_auth_challenge::~smsg_auth_challenge() {
  SharedDtor();
}

void smsg_auth_challenge::SharedDtor() {
  if (svrseed_ != &::google::protobuf::internal::kEmptyString) {
    delete svrseed_;
  }
  if (this != default_instance_) {
  }
}

void smsg_auth_challenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_auth_challenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_auth_challenge_descriptor_;
}

const smsg_auth_challenge& smsg_auth_challenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5flogin_2eproto();  return *default_instance_;
}

smsg_auth_challenge* smsg_auth_challenge::default_instance_ = NULL;

smsg_auth_challenge* smsg_auth_challenge::New() const {
  return new smsg_auth_challenge;
}

void smsg_auth_challenge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_svrseed()) {
      if (svrseed_ != &::google::protobuf::internal::kEmptyString) {
        svrseed_->clear();
      }
    }
    svrtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_auth_challenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes svrSeed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svrseed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_svrTime;
        break;
      }
      
      // optional uint32 svrTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svrTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrtime_)));
          set_has_svrtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void smsg_auth_challenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes svrSeed = 1;
  if (has_svrseed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->svrseed(), output);
  }
  
  // optional uint32 svrTime = 2;
  if (has_svrtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->svrtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* smsg_auth_challenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes svrSeed = 1;
  if (has_svrseed()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->svrseed(), target);
  }
  
  // optional uint32 svrTime = 2;
  if (has_svrtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->svrtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int smsg_auth_challenge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes svrSeed = 1;
    if (has_svrseed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svrseed());
    }
    
    // optional uint32 svrTime = 2;
    if (has_svrtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_auth_challenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_auth_challenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_auth_challenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_auth_challenge::MergeFrom(const smsg_auth_challenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svrseed()) {
      set_svrseed(from.svrseed());
    }
    if (from.has_svrtime()) {
      set_svrtime(from.svrtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_auth_challenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_auth_challenge::CopyFrom(const smsg_auth_challenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_auth_challenge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void smsg_auth_challenge::Swap(smsg_auth_challenge* other) {
  if (other != this) {
    std::swap(svrseed_, other->svrseed_);
    std::swap(svrtime_, other->svrtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_auth_challenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_auth_challenge_descriptor_;
  metadata.reflection = smsg_auth_challenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cmsg_auth_session::kClientBuidFieldNumber;
const int cmsg_auth_session::kClientSeedFieldNumber;
const int cmsg_auth_session::kClientTimeFieldNumber;
const int cmsg_auth_session::kAccountFieldNumber;
#endif  // !_MSC_VER

cmsg_auth_session::cmsg_auth_session()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cmsg_auth_session::InitAsDefaultInstance() {
}

cmsg_auth_session::cmsg_auth_session(const cmsg_auth_session& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cmsg_auth_session::SharedCtor() {
  _cached_size_ = 0;
  clientbuid_ = 0u;
  clientseed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clienttime_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmsg_auth_session::~cmsg_auth_session() {
  SharedDtor();
}

void cmsg_auth_session::SharedDtor() {
  if (clientseed_ != &::google::protobuf::internal::kEmptyString) {
    delete clientseed_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void cmsg_auth_session::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmsg_auth_session::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmsg_auth_session_descriptor_;
}

const cmsg_auth_session& cmsg_auth_session::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5flogin_2eproto();  return *default_instance_;
}

cmsg_auth_session* cmsg_auth_session::default_instance_ = NULL;

cmsg_auth_session* cmsg_auth_session::New() const {
  return new cmsg_auth_session;
}

void cmsg_auth_session::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientbuid_ = 0u;
    if (has_clientseed()) {
      if (clientseed_ != &::google::protobuf::internal::kEmptyString) {
        clientseed_->clear();
      }
    }
    clienttime_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmsg_auth_session::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 clientBuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientbuid_)));
          set_has_clientbuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clientSeed;
        break;
      }
      
      // required bytes clientSeed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientSeed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clientseed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientTime;
        break;
      }
      
      // optional uint32 clientTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clienttime_)));
          set_has_clienttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_account;
        break;
      }
      
      // required bytes account = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cmsg_auth_session::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 clientBuid = 1;
  if (has_clientbuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clientbuid(), output);
  }
  
  // required bytes clientSeed = 2;
  if (has_clientseed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->clientseed(), output);
  }
  
  // optional uint32 clientTime = 3;
  if (has_clienttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->clienttime(), output);
  }
  
  // required bytes account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->account(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cmsg_auth_session::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 clientBuid = 1;
  if (has_clientbuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clientbuid(), target);
  }
  
  // required bytes clientSeed = 2;
  if (has_clientseed()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->clientseed(), target);
  }
  
  // optional uint32 clientTime = 3;
  if (has_clienttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->clienttime(), target);
  }
  
  // required bytes account = 4;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->account(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cmsg_auth_session::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 clientBuid = 1;
    if (has_clientbuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientbuid());
    }
    
    // required bytes clientSeed = 2;
    if (has_clientseed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->clientseed());
    }
    
    // optional uint32 clientTime = 3;
    if (has_clienttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clienttime());
    }
    
    // required bytes account = 4;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmsg_auth_session::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmsg_auth_session* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmsg_auth_session*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmsg_auth_session::MergeFrom(const cmsg_auth_session& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientbuid()) {
      set_clientbuid(from.clientbuid());
    }
    if (from.has_clientseed()) {
      set_clientseed(from.clientseed());
    }
    if (from.has_clienttime()) {
      set_clienttime(from.clienttime());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmsg_auth_session::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_auth_session::CopyFrom(const cmsg_auth_session& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_auth_session::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  return true;
}

void cmsg_auth_session::Swap(cmsg_auth_session* other) {
  if (other != this) {
    std::swap(clientbuid_, other->clientbuid_);
    std::swap(clientseed_, other->clientseed_);
    std::swap(clienttime_, other->clienttime_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmsg_auth_session::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmsg_auth_session_descriptor_;
  metadata.reflection = cmsg_auth_session_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace login
}  // namespace protocol

// @@protoc_insertion_point(global_scope)
