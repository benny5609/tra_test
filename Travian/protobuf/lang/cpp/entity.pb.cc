// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "entity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace entity {

namespace {

const ::google::protobuf::Descriptor* WorldPlace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldPlace_reflection_ = NULL;
const ::google::protobuf::Descriptor* Village_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Village_reflection_ = NULL;
const ::google::protobuf::Descriptor* Villages_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Villages_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_entity_2eproto() {
  protobuf_AddDesc_entity_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "entity.proto");
  GOOGLE_CHECK(file != NULL);
  WorldPlace_descriptor_ = file->message_type(0);
  static const int WorldPlace_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldPlace, wref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldPlace, fieldtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldPlace, oasistype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldPlace, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldPlace, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldPlace, occupied_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldPlace, image_),
  };
  WorldPlace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldPlace_descriptor_,
      WorldPlace::default_instance_,
      WorldPlace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldPlace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldPlace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldPlace));
  Village_descriptor_ = file->message_type(1);
  static const int Village_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Village, place_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Village, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Village, capital_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Village, pop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Village, cp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Village, celebration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Village, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Village, wood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Village, clay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Village, iron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Village, crop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Village, maxstore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Village, maxcrop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Village, lastupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Village, exp1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Village, exp2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Village, exp3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Village, created_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Village, natar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Village, starv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Village, evasion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Village, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Village, loyalty_),
  };
  Village_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Village_descriptor_,
      Village::default_instance_,
      Village_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Village, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Village, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Village));
  Villages_descriptor_ = file->message_type(2);
  static const int Villages_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Villages, vil_),
  };
  Villages_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Villages_descriptor_,
      Villages::default_instance_,
      Villages_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Villages, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Villages, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Villages));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_entity_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldPlace_descriptor_, &WorldPlace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Village_descriptor_, &Village::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Villages_descriptor_, &Villages::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_entity_2eproto() {
  delete WorldPlace::default_instance_;
  delete WorldPlace_reflection_;
  delete Village::default_instance_;
  delete Village_reflection_;
  delete Villages::default_instance_;
  delete Villages_reflection_;
}

void protobuf_AddDesc_entity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014entity.proto\022\006entity\"w\n\nWorldPlace\022\014\n\004"
    "wref\030\001 \002(\r\022\021\n\tfieldtype\030\002 \002(\r\022\021\n\toasisty"
    "pe\030\003 \002(\r\022\t\n\001x\030\004 \002(\005\022\t\n\001y\030\005 \002(\005\022\020\n\010occupi"
    "ed\030\006 \002(\005\022\r\n\005image\030\007 \001(\014\"\200\003\n\007Village\022!\n\005p"
    "lace\030\001 \002(\0132\022.entity.WorldPlace\022\r\n\005owner\030"
    "\002 \002(\r\022\017\n\007capital\030\003 \002(\r\022\013\n\003pop\030\004 \002(\r\022\n\n\002c"
    "p\030\005 \002(\r\022\023\n\013celebration\030\006 \002(\005\022\014\n\004type\030\007 \002"
    "(\005\022\014\n\004wood\030\010 \002(\002\022\014\n\004clay\030\t \002(\002\022\014\n\004iron\030\n"
    " \002(\002\022\014\n\004crop\030\013 \002(\002\022\020\n\010maxstore\030\014 \002(\r\022\017\n\007"
    "maxcrop\030\r \002(\r\022\022\n\nlastupdate\030\016 \002(\r\022\014\n\004exp"
    "1\030\017 \001(\005\022\014\n\004exp2\030\020 \001(\005\022\014\n\004exp3\030\021 \001(\005\022\017\n\007c"
    "reated\030\022 \001(\005\022\r\n\005natar\030\023 \001(\r\022\r\n\005starv\030\024 \001"
    "(\r\022\017\n\007evasion\030\025 \001(\r\022\014\n\004name\030\026 \002(\014\022\017\n\007loy"
    "alty\030\027 \002(\r\"(\n\010Villages\022\034\n\003vil\030\001 \003(\0132\017.en"
    "tity.Village", 572);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "entity.proto", &protobuf_RegisterTypes);
  WorldPlace::default_instance_ = new WorldPlace();
  Village::default_instance_ = new Village();
  Villages::default_instance_ = new Villages();
  WorldPlace::default_instance_->InitAsDefaultInstance();
  Village::default_instance_->InitAsDefaultInstance();
  Villages::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_entity_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_entity_2eproto {
  StaticDescriptorInitializer_entity_2eproto() {
    protobuf_AddDesc_entity_2eproto();
  }
} static_descriptor_initializer_entity_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int WorldPlace::kWrefFieldNumber;
const int WorldPlace::kFieldtypeFieldNumber;
const int WorldPlace::kOasistypeFieldNumber;
const int WorldPlace::kXFieldNumber;
const int WorldPlace::kYFieldNumber;
const int WorldPlace::kOccupiedFieldNumber;
const int WorldPlace::kImageFieldNumber;
#endif  // !_MSC_VER

WorldPlace::WorldPlace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldPlace::InitAsDefaultInstance() {
}

WorldPlace::WorldPlace(const WorldPlace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldPlace::SharedCtor() {
  _cached_size_ = 0;
  wref_ = 0u;
  fieldtype_ = 0u;
  oasistype_ = 0u;
  x_ = 0;
  y_ = 0;
  occupied_ = 0;
  image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldPlace::~WorldPlace() {
  SharedDtor();
}

void WorldPlace::SharedDtor() {
  if (image_ != &::google::protobuf::internal::kEmptyString) {
    delete image_;
  }
  if (this != default_instance_) {
  }
}

void WorldPlace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldPlace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldPlace_descriptor_;
}

const WorldPlace& WorldPlace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_entity_2eproto();  return *default_instance_;
}

WorldPlace* WorldPlace::default_instance_ = NULL;

WorldPlace* WorldPlace::New() const {
  return new WorldPlace;
}

void WorldPlace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wref_ = 0u;
    fieldtype_ = 0u;
    oasistype_ = 0u;
    x_ = 0;
    y_ = 0;
    occupied_ = 0;
    if (has_image()) {
      if (image_ != &::google::protobuf::internal::kEmptyString) {
        image_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldPlace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 wref = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wref_)));
          set_has_wref();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fieldtype;
        break;
      }
      
      // required uint32 fieldtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fieldtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fieldtype_)));
          set_has_fieldtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_oasistype;
        break;
      }
      
      // required uint32 oasistype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oasistype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oasistype_)));
          set_has_oasistype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_x;
        break;
      }
      
      // required int32 x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_y;
        break;
      }
      
      // required int32 y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_occupied;
        break;
      }
      
      // required int32 occupied = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occupied:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupied_)));
          set_has_occupied();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_image;
        break;
      }
      
      // optional bytes image = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldPlace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 wref = 1;
  if (has_wref()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wref(), output);
  }
  
  // required uint32 fieldtype = 2;
  if (has_fieldtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fieldtype(), output);
  }
  
  // required uint32 oasistype = 3;
  if (has_oasistype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->oasistype(), output);
  }
  
  // required int32 x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->x(), output);
  }
  
  // required int32 y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->y(), output);
  }
  
  // required int32 occupied = 6;
  if (has_occupied()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->occupied(), output);
  }
  
  // optional bytes image = 7;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->image(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldPlace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 wref = 1;
  if (has_wref()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->wref(), target);
  }
  
  // required uint32 fieldtype = 2;
  if (has_fieldtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fieldtype(), target);
  }
  
  // required uint32 oasistype = 3;
  if (has_oasistype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->oasistype(), target);
  }
  
  // required int32 x = 4;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->x(), target);
  }
  
  // required int32 y = 5;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->y(), target);
  }
  
  // required int32 occupied = 6;
  if (has_occupied()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->occupied(), target);
  }
  
  // optional bytes image = 7;
  if (has_image()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->image(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldPlace::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 wref = 1;
    if (has_wref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wref());
    }
    
    // required uint32 fieldtype = 2;
    if (has_fieldtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fieldtype());
    }
    
    // required uint32 oasistype = 3;
    if (has_oasistype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oasistype());
    }
    
    // required int32 x = 4;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // required int32 y = 5;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
    // required int32 occupied = 6;
    if (has_occupied()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->occupied());
    }
    
    // optional bytes image = 7;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->image());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldPlace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldPlace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldPlace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldPlace::MergeFrom(const WorldPlace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wref()) {
      set_wref(from.wref());
    }
    if (from.has_fieldtype()) {
      set_fieldtype(from.fieldtype());
    }
    if (from.has_oasistype()) {
      set_oasistype(from.oasistype());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_occupied()) {
      set_occupied(from.occupied());
    }
    if (from.has_image()) {
      set_image(from.image());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldPlace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldPlace::CopyFrom(const WorldPlace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldPlace::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void WorldPlace::Swap(WorldPlace* other) {
  if (other != this) {
    std::swap(wref_, other->wref_);
    std::swap(fieldtype_, other->fieldtype_);
    std::swap(oasistype_, other->oasistype_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(occupied_, other->occupied_);
    std::swap(image_, other->image_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldPlace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldPlace_descriptor_;
  metadata.reflection = WorldPlace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Village::kPlaceFieldNumber;
const int Village::kOwnerFieldNumber;
const int Village::kCapitalFieldNumber;
const int Village::kPopFieldNumber;
const int Village::kCpFieldNumber;
const int Village::kCelebrationFieldNumber;
const int Village::kTypeFieldNumber;
const int Village::kWoodFieldNumber;
const int Village::kClayFieldNumber;
const int Village::kIronFieldNumber;
const int Village::kCropFieldNumber;
const int Village::kMaxstoreFieldNumber;
const int Village::kMaxcropFieldNumber;
const int Village::kLastupdateFieldNumber;
const int Village::kExp1FieldNumber;
const int Village::kExp2FieldNumber;
const int Village::kExp3FieldNumber;
const int Village::kCreatedFieldNumber;
const int Village::kNatarFieldNumber;
const int Village::kStarvFieldNumber;
const int Village::kEvasionFieldNumber;
const int Village::kNameFieldNumber;
const int Village::kLoyaltyFieldNumber;
#endif  // !_MSC_VER

Village::Village()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Village::InitAsDefaultInstance() {
  place_ = const_cast< ::entity::WorldPlace*>(&::entity::WorldPlace::default_instance());
}

Village::Village(const Village& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Village::SharedCtor() {
  _cached_size_ = 0;
  place_ = NULL;
  owner_ = 0u;
  capital_ = 0u;
  pop_ = 0u;
  cp_ = 0u;
  celebration_ = 0;
  type_ = 0;
  wood_ = 0;
  clay_ = 0;
  iron_ = 0;
  crop_ = 0;
  maxstore_ = 0u;
  maxcrop_ = 0u;
  lastupdate_ = 0u;
  exp1_ = 0;
  exp2_ = 0;
  exp3_ = 0;
  created_ = 0;
  natar_ = 0u;
  starv_ = 0u;
  evasion_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  loyalty_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Village::~Village() {
  SharedDtor();
}

void Village::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete place_;
  }
}

void Village::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Village::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Village_descriptor_;
}

const Village& Village::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_entity_2eproto();  return *default_instance_;
}

Village* Village::default_instance_ = NULL;

Village* Village::New() const {
  return new Village;
}

void Village::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_place()) {
      if (place_ != NULL) place_->::entity::WorldPlace::Clear();
    }
    owner_ = 0u;
    capital_ = 0u;
    pop_ = 0u;
    cp_ = 0u;
    celebration_ = 0;
    type_ = 0;
    wood_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    clay_ = 0;
    iron_ = 0;
    crop_ = 0;
    maxstore_ = 0u;
    maxcrop_ = 0u;
    lastupdate_ = 0u;
    exp1_ = 0;
    exp2_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    exp3_ = 0;
    created_ = 0;
    natar_ = 0u;
    starv_ = 0u;
    evasion_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    loyalty_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Village::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .entity.WorldPlace place = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_place()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_owner;
        break;
      }
      
      // required uint32 owner = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_capital;
        break;
      }
      
      // required uint32 capital = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capital:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capital_)));
          set_has_capital();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pop;
        break;
      }
      
      // required uint32 pop = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pop_)));
          set_has_pop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cp;
        break;
      }
      
      // required uint32 cp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cp_)));
          set_has_cp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_celebration;
        break;
      }
      
      // required int32 celebration = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_celebration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &celebration_)));
          set_has_celebration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }
      
      // required int32 type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_wood;
        break;
      }
      
      // required float wood = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wood_)));
          set_has_wood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_clay;
        break;
      }
      
      // required float clay = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_clay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clay_)));
          set_has_clay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_iron;
        break;
      }
      
      // required float iron = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_iron:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &iron_)));
          set_has_iron();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_crop;
        break;
      }
      
      // required float crop = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_crop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &crop_)));
          set_has_crop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_maxstore;
        break;
      }
      
      // required uint32 maxstore = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxstore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxstore_)));
          set_has_maxstore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_maxcrop;
        break;
      }
      
      // required uint32 maxcrop = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxcrop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxcrop_)));
          set_has_maxcrop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_lastupdate;
        break;
      }
      
      // required uint32 lastupdate = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastupdate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastupdate_)));
          set_has_lastupdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_exp1;
        break;
      }
      
      // optional int32 exp1 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp1_)));
          set_has_exp1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_exp2;
        break;
      }
      
      // optional int32 exp2 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp2_)));
          set_has_exp2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_exp3;
        break;
      }
      
      // optional int32 exp3 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp3_)));
          set_has_exp3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_created;
        break;
      }
      
      // optional int32 created = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &created_)));
          set_has_created();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_natar;
        break;
      }
      
      // optional uint32 natar = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_natar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &natar_)));
          set_has_natar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_starv;
        break;
      }
      
      // optional uint32 starv = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starv_)));
          set_has_starv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_evasion;
        break;
      }
      
      // optional uint32 evasion = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_evasion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evasion_)));
          set_has_evasion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_name;
        break;
      }
      
      // required bytes name = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_loyalty;
        break;
      }
      
      // required uint32 loyalty = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loyalty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loyalty_)));
          set_has_loyalty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Village::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .entity.WorldPlace place = 1;
  if (has_place()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->place(), output);
  }
  
  // required uint32 owner = 2;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner(), output);
  }
  
  // required uint32 capital = 3;
  if (has_capital()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->capital(), output);
  }
  
  // required uint32 pop = 4;
  if (has_pop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pop(), output);
  }
  
  // required uint32 cp = 5;
  if (has_cp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cp(), output);
  }
  
  // required int32 celebration = 6;
  if (has_celebration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->celebration(), output);
  }
  
  // required int32 type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->type(), output);
  }
  
  // required float wood = 8;
  if (has_wood()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->wood(), output);
  }
  
  // required float clay = 9;
  if (has_clay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->clay(), output);
  }
  
  // required float iron = 10;
  if (has_iron()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->iron(), output);
  }
  
  // required float crop = 11;
  if (has_crop()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->crop(), output);
  }
  
  // required uint32 maxstore = 12;
  if (has_maxstore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->maxstore(), output);
  }
  
  // required uint32 maxcrop = 13;
  if (has_maxcrop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->maxcrop(), output);
  }
  
  // required uint32 lastupdate = 14;
  if (has_lastupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->lastupdate(), output);
  }
  
  // optional int32 exp1 = 15;
  if (has_exp1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->exp1(), output);
  }
  
  // optional int32 exp2 = 16;
  if (has_exp2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->exp2(), output);
  }
  
  // optional int32 exp3 = 17;
  if (has_exp3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->exp3(), output);
  }
  
  // optional int32 created = 18;
  if (has_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->created(), output);
  }
  
  // optional uint32 natar = 19;
  if (has_natar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->natar(), output);
  }
  
  // optional uint32 starv = 20;
  if (has_starv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->starv(), output);
  }
  
  // optional uint32 evasion = 21;
  if (has_evasion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->evasion(), output);
  }
  
  // required bytes name = 22;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      22, this->name(), output);
  }
  
  // required uint32 loyalty = 23;
  if (has_loyalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->loyalty(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Village::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .entity.WorldPlace place = 1;
  if (has_place()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->place(), target);
  }
  
  // required uint32 owner = 2;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner(), target);
  }
  
  // required uint32 capital = 3;
  if (has_capital()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->capital(), target);
  }
  
  // required uint32 pop = 4;
  if (has_pop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pop(), target);
  }
  
  // required uint32 cp = 5;
  if (has_cp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cp(), target);
  }
  
  // required int32 celebration = 6;
  if (has_celebration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->celebration(), target);
  }
  
  // required int32 type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->type(), target);
  }
  
  // required float wood = 8;
  if (has_wood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->wood(), target);
  }
  
  // required float clay = 9;
  if (has_clay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->clay(), target);
  }
  
  // required float iron = 10;
  if (has_iron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->iron(), target);
  }
  
  // required float crop = 11;
  if (has_crop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->crop(), target);
  }
  
  // required uint32 maxstore = 12;
  if (has_maxstore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->maxstore(), target);
  }
  
  // required uint32 maxcrop = 13;
  if (has_maxcrop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->maxcrop(), target);
  }
  
  // required uint32 lastupdate = 14;
  if (has_lastupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->lastupdate(), target);
  }
  
  // optional int32 exp1 = 15;
  if (has_exp1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->exp1(), target);
  }
  
  // optional int32 exp2 = 16;
  if (has_exp2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->exp2(), target);
  }
  
  // optional int32 exp3 = 17;
  if (has_exp3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->exp3(), target);
  }
  
  // optional int32 created = 18;
  if (has_created()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->created(), target);
  }
  
  // optional uint32 natar = 19;
  if (has_natar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->natar(), target);
  }
  
  // optional uint32 starv = 20;
  if (has_starv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->starv(), target);
  }
  
  // optional uint32 evasion = 21;
  if (has_evasion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->evasion(), target);
  }
  
  // required bytes name = 22;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->name(), target);
  }
  
  // required uint32 loyalty = 23;
  if (has_loyalty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->loyalty(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Village::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .entity.WorldPlace place = 1;
    if (has_place()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->place());
    }
    
    // required uint32 owner = 2;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner());
    }
    
    // required uint32 capital = 3;
    if (has_capital()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->capital());
    }
    
    // required uint32 pop = 4;
    if (has_pop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pop());
    }
    
    // required uint32 cp = 5;
    if (has_cp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cp());
    }
    
    // required int32 celebration = 6;
    if (has_celebration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->celebration());
    }
    
    // required int32 type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required float wood = 8;
    if (has_wood()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float clay = 9;
    if (has_clay()) {
      total_size += 1 + 4;
    }
    
    // required float iron = 10;
    if (has_iron()) {
      total_size += 1 + 4;
    }
    
    // required float crop = 11;
    if (has_crop()) {
      total_size += 1 + 4;
    }
    
    // required uint32 maxstore = 12;
    if (has_maxstore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxstore());
    }
    
    // required uint32 maxcrop = 13;
    if (has_maxcrop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxcrop());
    }
    
    // required uint32 lastupdate = 14;
    if (has_lastupdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastupdate());
    }
    
    // optional int32 exp1 = 15;
    if (has_exp1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp1());
    }
    
    // optional int32 exp2 = 16;
    if (has_exp2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp2());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 exp3 = 17;
    if (has_exp3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp3());
    }
    
    // optional int32 created = 18;
    if (has_created()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->created());
    }
    
    // optional uint32 natar = 19;
    if (has_natar()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->natar());
    }
    
    // optional uint32 starv = 20;
    if (has_starv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starv());
    }
    
    // optional uint32 evasion = 21;
    if (has_evasion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evasion());
    }
    
    // required bytes name = 22;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required uint32 loyalty = 23;
    if (has_loyalty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loyalty());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Village::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Village* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Village*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Village::MergeFrom(const Village& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_place()) {
      mutable_place()->::entity::WorldPlace::MergeFrom(from.place());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_capital()) {
      set_capital(from.capital());
    }
    if (from.has_pop()) {
      set_pop(from.pop());
    }
    if (from.has_cp()) {
      set_cp(from.cp());
    }
    if (from.has_celebration()) {
      set_celebration(from.celebration());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_wood()) {
      set_wood(from.wood());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_clay()) {
      set_clay(from.clay());
    }
    if (from.has_iron()) {
      set_iron(from.iron());
    }
    if (from.has_crop()) {
      set_crop(from.crop());
    }
    if (from.has_maxstore()) {
      set_maxstore(from.maxstore());
    }
    if (from.has_maxcrop()) {
      set_maxcrop(from.maxcrop());
    }
    if (from.has_lastupdate()) {
      set_lastupdate(from.lastupdate());
    }
    if (from.has_exp1()) {
      set_exp1(from.exp1());
    }
    if (from.has_exp2()) {
      set_exp2(from.exp2());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_exp3()) {
      set_exp3(from.exp3());
    }
    if (from.has_created()) {
      set_created(from.created());
    }
    if (from.has_natar()) {
      set_natar(from.natar());
    }
    if (from.has_starv()) {
      set_starv(from.starv());
    }
    if (from.has_evasion()) {
      set_evasion(from.evasion());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_loyalty()) {
      set_loyalty(from.loyalty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Village::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Village::CopyFrom(const Village& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Village::IsInitialized() const {
  if ((_has_bits_[0] & 0x00603fff) != 0x00603fff) return false;
  
  if (has_place()) {
    if (!this->place().IsInitialized()) return false;
  }
  return true;
}

void Village::Swap(Village* other) {
  if (other != this) {
    std::swap(place_, other->place_);
    std::swap(owner_, other->owner_);
    std::swap(capital_, other->capital_);
    std::swap(pop_, other->pop_);
    std::swap(cp_, other->cp_);
    std::swap(celebration_, other->celebration_);
    std::swap(type_, other->type_);
    std::swap(wood_, other->wood_);
    std::swap(clay_, other->clay_);
    std::swap(iron_, other->iron_);
    std::swap(crop_, other->crop_);
    std::swap(maxstore_, other->maxstore_);
    std::swap(maxcrop_, other->maxcrop_);
    std::swap(lastupdate_, other->lastupdate_);
    std::swap(exp1_, other->exp1_);
    std::swap(exp2_, other->exp2_);
    std::swap(exp3_, other->exp3_);
    std::swap(created_, other->created_);
    std::swap(natar_, other->natar_);
    std::swap(starv_, other->starv_);
    std::swap(evasion_, other->evasion_);
    std::swap(name_, other->name_);
    std::swap(loyalty_, other->loyalty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Village::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Village_descriptor_;
  metadata.reflection = Village_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Villages::kVilFieldNumber;
#endif  // !_MSC_VER

Villages::Villages()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Villages::InitAsDefaultInstance() {
}

Villages::Villages(const Villages& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Villages::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Villages::~Villages() {
  SharedDtor();
}

void Villages::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Villages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Villages::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Villages_descriptor_;
}

const Villages& Villages::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_entity_2eproto();  return *default_instance_;
}

Villages* Villages::default_instance_ = NULL;

Villages* Villages::New() const {
  return new Villages;
}

void Villages::Clear() {
  vil_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Villages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .entity.Village vil = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vil:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vil()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_vil;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Villages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .entity.Village vil = 1;
  for (int i = 0; i < this->vil_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vil(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Villages::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .entity.Village vil = 1;
  for (int i = 0; i < this->vil_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vil(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Villages::ByteSize() const {
  int total_size = 0;
  
  // repeated .entity.Village vil = 1;
  total_size += 1 * this->vil_size();
  for (int i = 0; i < this->vil_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vil(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Villages::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Villages* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Villages*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Villages::MergeFrom(const Villages& from) {
  GOOGLE_CHECK_NE(&from, this);
  vil_.MergeFrom(from.vil_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Villages::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Villages::CopyFrom(const Villages& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Villages::IsInitialized() const {
  
  for (int i = 0; i < vil_size(); i++) {
    if (!this->vil(i).IsInitialized()) return false;
  }
  return true;
}

void Villages::Swap(Villages* other) {
  if (other != this) {
    vil_.Swap(&other->vil_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Villages::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Villages_descriptor_;
  metadata.reflection = Villages_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace entity

// @@protoc_insertion_point(global_scope)
