// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: entity.proto

#ifndef PROTOBUF_entity_2eproto__INCLUDED
#define PROTOBUF_entity_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace entity {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_entity_2eproto();
void protobuf_AssignDesc_entity_2eproto();
void protobuf_ShutdownFile_entity_2eproto();

class WorldPlace;
class Village;
class Villages;

// ===================================================================

class WorldPlace : public ::google::protobuf::Message {
 public:
  WorldPlace();
  virtual ~WorldPlace();
  
  WorldPlace(const WorldPlace& from);
  
  inline WorldPlace& operator=(const WorldPlace& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldPlace& default_instance();
  
  void Swap(WorldPlace* other);
  
  // implements Message ----------------------------------------------
  
  WorldPlace* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldPlace& from);
  void MergeFrom(const WorldPlace& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 wref = 1;
  inline bool has_wref() const;
  inline void clear_wref();
  static const int kWrefFieldNumber = 1;
  inline ::google::protobuf::uint32 wref() const;
  inline void set_wref(::google::protobuf::uint32 value);
  
  // required uint32 fieldtype = 2;
  inline bool has_fieldtype() const;
  inline void clear_fieldtype();
  static const int kFieldtypeFieldNumber = 2;
  inline ::google::protobuf::uint32 fieldtype() const;
  inline void set_fieldtype(::google::protobuf::uint32 value);
  
  // required uint32 oasistype = 3;
  inline bool has_oasistype() const;
  inline void clear_oasistype();
  static const int kOasistypeFieldNumber = 3;
  inline ::google::protobuf::uint32 oasistype() const;
  inline void set_oasistype(::google::protobuf::uint32 value);
  
  // required int32 x = 4;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 4;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // required int32 y = 5;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 5;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
  // required int32 occupied = 6;
  inline bool has_occupied() const;
  inline void clear_occupied();
  static const int kOccupiedFieldNumber = 6;
  inline ::google::protobuf::int32 occupied() const;
  inline void set_occupied(::google::protobuf::int32 value);
  
  // optional bytes image = 7;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 7;
  inline const ::std::string& image() const;
  inline void set_image(const ::std::string& value);
  inline void set_image(const char* value);
  inline void set_image(const void* value, size_t size);
  inline ::std::string* mutable_image();
  inline ::std::string* release_image();
  
  // @@protoc_insertion_point(class_scope:entity.WorldPlace)
 private:
  inline void set_has_wref();
  inline void clear_has_wref();
  inline void set_has_fieldtype();
  inline void clear_has_fieldtype();
  inline void set_has_oasistype();
  inline void clear_has_oasistype();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_occupied();
  inline void clear_has_occupied();
  inline void set_has_image();
  inline void clear_has_image();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 wref_;
  ::google::protobuf::uint32 fieldtype_;
  ::google::protobuf::uint32 oasistype_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 occupied_;
  ::std::string* image_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_entity_2eproto();
  friend void protobuf_AssignDesc_entity_2eproto();
  friend void protobuf_ShutdownFile_entity_2eproto();
  
  void InitAsDefaultInstance();
  static WorldPlace* default_instance_;
};
// -------------------------------------------------------------------

class Village : public ::google::protobuf::Message {
 public:
  Village();
  virtual ~Village();
  
  Village(const Village& from);
  
  inline Village& operator=(const Village& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Village& default_instance();
  
  void Swap(Village* other);
  
  // implements Message ----------------------------------------------
  
  Village* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Village& from);
  void MergeFrom(const Village& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .entity.WorldPlace place = 1;
  inline bool has_place() const;
  inline void clear_place();
  static const int kPlaceFieldNumber = 1;
  inline const ::entity::WorldPlace& place() const;
  inline ::entity::WorldPlace* mutable_place();
  inline ::entity::WorldPlace* release_place();
  
  // required uint32 owner = 2;
  inline bool has_owner() const;
  inline void clear_owner();
  static const int kOwnerFieldNumber = 2;
  inline ::google::protobuf::uint32 owner() const;
  inline void set_owner(::google::protobuf::uint32 value);
  
  // required uint32 capital = 3;
  inline bool has_capital() const;
  inline void clear_capital();
  static const int kCapitalFieldNumber = 3;
  inline ::google::protobuf::uint32 capital() const;
  inline void set_capital(::google::protobuf::uint32 value);
  
  // required uint32 pop = 4;
  inline bool has_pop() const;
  inline void clear_pop();
  static const int kPopFieldNumber = 4;
  inline ::google::protobuf::uint32 pop() const;
  inline void set_pop(::google::protobuf::uint32 value);
  
  // required uint32 cp = 5;
  inline bool has_cp() const;
  inline void clear_cp();
  static const int kCpFieldNumber = 5;
  inline ::google::protobuf::uint32 cp() const;
  inline void set_cp(::google::protobuf::uint32 value);
  
  // required int32 celebration = 6;
  inline bool has_celebration() const;
  inline void clear_celebration();
  static const int kCelebrationFieldNumber = 6;
  inline ::google::protobuf::int32 celebration() const;
  inline void set_celebration(::google::protobuf::int32 value);
  
  // required int32 type = 7;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // required float wood = 8;
  inline bool has_wood() const;
  inline void clear_wood();
  static const int kWoodFieldNumber = 8;
  inline float wood() const;
  inline void set_wood(float value);
  
  // required float clay = 9;
  inline bool has_clay() const;
  inline void clear_clay();
  static const int kClayFieldNumber = 9;
  inline float clay() const;
  inline void set_clay(float value);
  
  // required float iron = 10;
  inline bool has_iron() const;
  inline void clear_iron();
  static const int kIronFieldNumber = 10;
  inline float iron() const;
  inline void set_iron(float value);
  
  // required float crop = 11;
  inline bool has_crop() const;
  inline void clear_crop();
  static const int kCropFieldNumber = 11;
  inline float crop() const;
  inline void set_crop(float value);
  
  // required uint32 maxstore = 12;
  inline bool has_maxstore() const;
  inline void clear_maxstore();
  static const int kMaxstoreFieldNumber = 12;
  inline ::google::protobuf::uint32 maxstore() const;
  inline void set_maxstore(::google::protobuf::uint32 value);
  
  // required uint32 maxcrop = 13;
  inline bool has_maxcrop() const;
  inline void clear_maxcrop();
  static const int kMaxcropFieldNumber = 13;
  inline ::google::protobuf::uint32 maxcrop() const;
  inline void set_maxcrop(::google::protobuf::uint32 value);
  
  // required uint32 lastupdate = 14;
  inline bool has_lastupdate() const;
  inline void clear_lastupdate();
  static const int kLastupdateFieldNumber = 14;
  inline ::google::protobuf::uint32 lastupdate() const;
  inline void set_lastupdate(::google::protobuf::uint32 value);
  
  // optional int32 exp1 = 15;
  inline bool has_exp1() const;
  inline void clear_exp1();
  static const int kExp1FieldNumber = 15;
  inline ::google::protobuf::int32 exp1() const;
  inline void set_exp1(::google::protobuf::int32 value);
  
  // optional int32 exp2 = 16;
  inline bool has_exp2() const;
  inline void clear_exp2();
  static const int kExp2FieldNumber = 16;
  inline ::google::protobuf::int32 exp2() const;
  inline void set_exp2(::google::protobuf::int32 value);
  
  // optional int32 exp3 = 17;
  inline bool has_exp3() const;
  inline void clear_exp3();
  static const int kExp3FieldNumber = 17;
  inline ::google::protobuf::int32 exp3() const;
  inline void set_exp3(::google::protobuf::int32 value);
  
  // optional int32 created = 18;
  inline bool has_created() const;
  inline void clear_created();
  static const int kCreatedFieldNumber = 18;
  inline ::google::protobuf::int32 created() const;
  inline void set_created(::google::protobuf::int32 value);
  
  // optional uint32 natar = 19;
  inline bool has_natar() const;
  inline void clear_natar();
  static const int kNatarFieldNumber = 19;
  inline ::google::protobuf::uint32 natar() const;
  inline void set_natar(::google::protobuf::uint32 value);
  
  // optional uint32 starv = 20;
  inline bool has_starv() const;
  inline void clear_starv();
  static const int kStarvFieldNumber = 20;
  inline ::google::protobuf::uint32 starv() const;
  inline void set_starv(::google::protobuf::uint32 value);
  
  // optional uint32 evasion = 21;
  inline bool has_evasion() const;
  inline void clear_evasion();
  static const int kEvasionFieldNumber = 21;
  inline ::google::protobuf::uint32 evasion() const;
  inline void set_evasion(::google::protobuf::uint32 value);
  
  // required bytes name = 22;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 22;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint32 loyalty = 23;
  inline bool has_loyalty() const;
  inline void clear_loyalty();
  static const int kLoyaltyFieldNumber = 23;
  inline ::google::protobuf::uint32 loyalty() const;
  inline void set_loyalty(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:entity.Village)
 private:
  inline void set_has_place();
  inline void clear_has_place();
  inline void set_has_owner();
  inline void clear_has_owner();
  inline void set_has_capital();
  inline void clear_has_capital();
  inline void set_has_pop();
  inline void clear_has_pop();
  inline void set_has_cp();
  inline void clear_has_cp();
  inline void set_has_celebration();
  inline void clear_has_celebration();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_wood();
  inline void clear_has_wood();
  inline void set_has_clay();
  inline void clear_has_clay();
  inline void set_has_iron();
  inline void clear_has_iron();
  inline void set_has_crop();
  inline void clear_has_crop();
  inline void set_has_maxstore();
  inline void clear_has_maxstore();
  inline void set_has_maxcrop();
  inline void clear_has_maxcrop();
  inline void set_has_lastupdate();
  inline void clear_has_lastupdate();
  inline void set_has_exp1();
  inline void clear_has_exp1();
  inline void set_has_exp2();
  inline void clear_has_exp2();
  inline void set_has_exp3();
  inline void clear_has_exp3();
  inline void set_has_created();
  inline void clear_has_created();
  inline void set_has_natar();
  inline void clear_has_natar();
  inline void set_has_starv();
  inline void clear_has_starv();
  inline void set_has_evasion();
  inline void clear_has_evasion();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_loyalty();
  inline void clear_has_loyalty();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::entity::WorldPlace* place_;
  ::google::protobuf::uint32 owner_;
  ::google::protobuf::uint32 capital_;
  ::google::protobuf::uint32 pop_;
  ::google::protobuf::uint32 cp_;
  ::google::protobuf::int32 celebration_;
  ::google::protobuf::int32 type_;
  float wood_;
  float clay_;
  float iron_;
  float crop_;
  ::google::protobuf::uint32 maxstore_;
  ::google::protobuf::uint32 maxcrop_;
  ::google::protobuf::uint32 lastupdate_;
  ::google::protobuf::int32 exp1_;
  ::google::protobuf::int32 exp2_;
  ::google::protobuf::int32 exp3_;
  ::google::protobuf::int32 created_;
  ::google::protobuf::uint32 natar_;
  ::google::protobuf::uint32 starv_;
  ::google::protobuf::uint32 evasion_;
  ::std::string* name_;
  ::google::protobuf::uint32 loyalty_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];
  
  friend void  protobuf_AddDesc_entity_2eproto();
  friend void protobuf_AssignDesc_entity_2eproto();
  friend void protobuf_ShutdownFile_entity_2eproto();
  
  void InitAsDefaultInstance();
  static Village* default_instance_;
};
// -------------------------------------------------------------------

class Villages : public ::google::protobuf::Message {
 public:
  Villages();
  virtual ~Villages();
  
  Villages(const Villages& from);
  
  inline Villages& operator=(const Villages& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Villages& default_instance();
  
  void Swap(Villages* other);
  
  // implements Message ----------------------------------------------
  
  Villages* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Villages& from);
  void MergeFrom(const Villages& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .entity.Village vil = 1;
  inline int vil_size() const;
  inline void clear_vil();
  static const int kVilFieldNumber = 1;
  inline const ::entity::Village& vil(int index) const;
  inline ::entity::Village* mutable_vil(int index);
  inline ::entity::Village* add_vil();
  inline const ::google::protobuf::RepeatedPtrField< ::entity::Village >&
      vil() const;
  inline ::google::protobuf::RepeatedPtrField< ::entity::Village >*
      mutable_vil();
  
  // @@protoc_insertion_point(class_scope:entity.Villages)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::entity::Village > vil_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_entity_2eproto();
  friend void protobuf_AssignDesc_entity_2eproto();
  friend void protobuf_ShutdownFile_entity_2eproto();
  
  void InitAsDefaultInstance();
  static Villages* default_instance_;
};
// ===================================================================


// ===================================================================

// WorldPlace

// required uint32 wref = 1;
inline bool WorldPlace::has_wref() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorldPlace::set_has_wref() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorldPlace::clear_has_wref() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorldPlace::clear_wref() {
  wref_ = 0u;
  clear_has_wref();
}
inline ::google::protobuf::uint32 WorldPlace::wref() const {
  return wref_;
}
inline void WorldPlace::set_wref(::google::protobuf::uint32 value) {
  set_has_wref();
  wref_ = value;
}

// required uint32 fieldtype = 2;
inline bool WorldPlace::has_fieldtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorldPlace::set_has_fieldtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorldPlace::clear_has_fieldtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorldPlace::clear_fieldtype() {
  fieldtype_ = 0u;
  clear_has_fieldtype();
}
inline ::google::protobuf::uint32 WorldPlace::fieldtype() const {
  return fieldtype_;
}
inline void WorldPlace::set_fieldtype(::google::protobuf::uint32 value) {
  set_has_fieldtype();
  fieldtype_ = value;
}

// required uint32 oasistype = 3;
inline bool WorldPlace::has_oasistype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WorldPlace::set_has_oasistype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WorldPlace::clear_has_oasistype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WorldPlace::clear_oasistype() {
  oasistype_ = 0u;
  clear_has_oasistype();
}
inline ::google::protobuf::uint32 WorldPlace::oasistype() const {
  return oasistype_;
}
inline void WorldPlace::set_oasistype(::google::protobuf::uint32 value) {
  set_has_oasistype();
  oasistype_ = value;
}

// required int32 x = 4;
inline bool WorldPlace::has_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WorldPlace::set_has_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WorldPlace::clear_has_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WorldPlace::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 WorldPlace::x() const {
  return x_;
}
inline void WorldPlace::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required int32 y = 5;
inline bool WorldPlace::has_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WorldPlace::set_has_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WorldPlace::clear_has_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WorldPlace::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 WorldPlace::y() const {
  return y_;
}
inline void WorldPlace::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// required int32 occupied = 6;
inline bool WorldPlace::has_occupied() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WorldPlace::set_has_occupied() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WorldPlace::clear_has_occupied() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WorldPlace::clear_occupied() {
  occupied_ = 0;
  clear_has_occupied();
}
inline ::google::protobuf::int32 WorldPlace::occupied() const {
  return occupied_;
}
inline void WorldPlace::set_occupied(::google::protobuf::int32 value) {
  set_has_occupied();
  occupied_ = value;
}

// optional bytes image = 7;
inline bool WorldPlace::has_image() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WorldPlace::set_has_image() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WorldPlace::clear_has_image() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WorldPlace::clear_image() {
  if (image_ != &::google::protobuf::internal::kEmptyString) {
    image_->clear();
  }
  clear_has_image();
}
inline const ::std::string& WorldPlace::image() const {
  return *image_;
}
inline void WorldPlace::set_image(const ::std::string& value) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  image_->assign(value);
}
inline void WorldPlace::set_image(const char* value) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  image_->assign(value);
}
inline void WorldPlace::set_image(const void* value, size_t size) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  image_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorldPlace::mutable_image() {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  return image_;
}
inline ::std::string* WorldPlace::release_image() {
  clear_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = image_;
    image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Village

// required .entity.WorldPlace place = 1;
inline bool Village::has_place() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Village::set_has_place() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Village::clear_has_place() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Village::clear_place() {
  if (place_ != NULL) place_->::entity::WorldPlace::Clear();
  clear_has_place();
}
inline const ::entity::WorldPlace& Village::place() const {
  return place_ != NULL ? *place_ : *default_instance_->place_;
}
inline ::entity::WorldPlace* Village::mutable_place() {
  set_has_place();
  if (place_ == NULL) place_ = new ::entity::WorldPlace;
  return place_;
}
inline ::entity::WorldPlace* Village::release_place() {
  clear_has_place();
  ::entity::WorldPlace* temp = place_;
  place_ = NULL;
  return temp;
}

// required uint32 owner = 2;
inline bool Village::has_owner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Village::set_has_owner() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Village::clear_has_owner() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Village::clear_owner() {
  owner_ = 0u;
  clear_has_owner();
}
inline ::google::protobuf::uint32 Village::owner() const {
  return owner_;
}
inline void Village::set_owner(::google::protobuf::uint32 value) {
  set_has_owner();
  owner_ = value;
}

// required uint32 capital = 3;
inline bool Village::has_capital() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Village::set_has_capital() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Village::clear_has_capital() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Village::clear_capital() {
  capital_ = 0u;
  clear_has_capital();
}
inline ::google::protobuf::uint32 Village::capital() const {
  return capital_;
}
inline void Village::set_capital(::google::protobuf::uint32 value) {
  set_has_capital();
  capital_ = value;
}

// required uint32 pop = 4;
inline bool Village::has_pop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Village::set_has_pop() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Village::clear_has_pop() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Village::clear_pop() {
  pop_ = 0u;
  clear_has_pop();
}
inline ::google::protobuf::uint32 Village::pop() const {
  return pop_;
}
inline void Village::set_pop(::google::protobuf::uint32 value) {
  set_has_pop();
  pop_ = value;
}

// required uint32 cp = 5;
inline bool Village::has_cp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Village::set_has_cp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Village::clear_has_cp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Village::clear_cp() {
  cp_ = 0u;
  clear_has_cp();
}
inline ::google::protobuf::uint32 Village::cp() const {
  return cp_;
}
inline void Village::set_cp(::google::protobuf::uint32 value) {
  set_has_cp();
  cp_ = value;
}

// required int32 celebration = 6;
inline bool Village::has_celebration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Village::set_has_celebration() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Village::clear_has_celebration() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Village::clear_celebration() {
  celebration_ = 0;
  clear_has_celebration();
}
inline ::google::protobuf::int32 Village::celebration() const {
  return celebration_;
}
inline void Village::set_celebration(::google::protobuf::int32 value) {
  set_has_celebration();
  celebration_ = value;
}

// required int32 type = 7;
inline bool Village::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Village::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Village::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Village::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Village::type() const {
  return type_;
}
inline void Village::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required float wood = 8;
inline bool Village::has_wood() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Village::set_has_wood() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Village::clear_has_wood() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Village::clear_wood() {
  wood_ = 0;
  clear_has_wood();
}
inline float Village::wood() const {
  return wood_;
}
inline void Village::set_wood(float value) {
  set_has_wood();
  wood_ = value;
}

// required float clay = 9;
inline bool Village::has_clay() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Village::set_has_clay() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Village::clear_has_clay() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Village::clear_clay() {
  clay_ = 0;
  clear_has_clay();
}
inline float Village::clay() const {
  return clay_;
}
inline void Village::set_clay(float value) {
  set_has_clay();
  clay_ = value;
}

// required float iron = 10;
inline bool Village::has_iron() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Village::set_has_iron() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Village::clear_has_iron() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Village::clear_iron() {
  iron_ = 0;
  clear_has_iron();
}
inline float Village::iron() const {
  return iron_;
}
inline void Village::set_iron(float value) {
  set_has_iron();
  iron_ = value;
}

// required float crop = 11;
inline bool Village::has_crop() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Village::set_has_crop() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Village::clear_has_crop() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Village::clear_crop() {
  crop_ = 0;
  clear_has_crop();
}
inline float Village::crop() const {
  return crop_;
}
inline void Village::set_crop(float value) {
  set_has_crop();
  crop_ = value;
}

// required uint32 maxstore = 12;
inline bool Village::has_maxstore() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Village::set_has_maxstore() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Village::clear_has_maxstore() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Village::clear_maxstore() {
  maxstore_ = 0u;
  clear_has_maxstore();
}
inline ::google::protobuf::uint32 Village::maxstore() const {
  return maxstore_;
}
inline void Village::set_maxstore(::google::protobuf::uint32 value) {
  set_has_maxstore();
  maxstore_ = value;
}

// required uint32 maxcrop = 13;
inline bool Village::has_maxcrop() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Village::set_has_maxcrop() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Village::clear_has_maxcrop() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Village::clear_maxcrop() {
  maxcrop_ = 0u;
  clear_has_maxcrop();
}
inline ::google::protobuf::uint32 Village::maxcrop() const {
  return maxcrop_;
}
inline void Village::set_maxcrop(::google::protobuf::uint32 value) {
  set_has_maxcrop();
  maxcrop_ = value;
}

// required uint32 lastupdate = 14;
inline bool Village::has_lastupdate() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Village::set_has_lastupdate() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Village::clear_has_lastupdate() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Village::clear_lastupdate() {
  lastupdate_ = 0u;
  clear_has_lastupdate();
}
inline ::google::protobuf::uint32 Village::lastupdate() const {
  return lastupdate_;
}
inline void Village::set_lastupdate(::google::protobuf::uint32 value) {
  set_has_lastupdate();
  lastupdate_ = value;
}

// optional int32 exp1 = 15;
inline bool Village::has_exp1() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Village::set_has_exp1() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Village::clear_has_exp1() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Village::clear_exp1() {
  exp1_ = 0;
  clear_has_exp1();
}
inline ::google::protobuf::int32 Village::exp1() const {
  return exp1_;
}
inline void Village::set_exp1(::google::protobuf::int32 value) {
  set_has_exp1();
  exp1_ = value;
}

// optional int32 exp2 = 16;
inline bool Village::has_exp2() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Village::set_has_exp2() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Village::clear_has_exp2() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Village::clear_exp2() {
  exp2_ = 0;
  clear_has_exp2();
}
inline ::google::protobuf::int32 Village::exp2() const {
  return exp2_;
}
inline void Village::set_exp2(::google::protobuf::int32 value) {
  set_has_exp2();
  exp2_ = value;
}

// optional int32 exp3 = 17;
inline bool Village::has_exp3() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Village::set_has_exp3() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Village::clear_has_exp3() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Village::clear_exp3() {
  exp3_ = 0;
  clear_has_exp3();
}
inline ::google::protobuf::int32 Village::exp3() const {
  return exp3_;
}
inline void Village::set_exp3(::google::protobuf::int32 value) {
  set_has_exp3();
  exp3_ = value;
}

// optional int32 created = 18;
inline bool Village::has_created() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Village::set_has_created() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Village::clear_has_created() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Village::clear_created() {
  created_ = 0;
  clear_has_created();
}
inline ::google::protobuf::int32 Village::created() const {
  return created_;
}
inline void Village::set_created(::google::protobuf::int32 value) {
  set_has_created();
  created_ = value;
}

// optional uint32 natar = 19;
inline bool Village::has_natar() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Village::set_has_natar() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Village::clear_has_natar() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Village::clear_natar() {
  natar_ = 0u;
  clear_has_natar();
}
inline ::google::protobuf::uint32 Village::natar() const {
  return natar_;
}
inline void Village::set_natar(::google::protobuf::uint32 value) {
  set_has_natar();
  natar_ = value;
}

// optional uint32 starv = 20;
inline bool Village::has_starv() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Village::set_has_starv() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Village::clear_has_starv() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Village::clear_starv() {
  starv_ = 0u;
  clear_has_starv();
}
inline ::google::protobuf::uint32 Village::starv() const {
  return starv_;
}
inline void Village::set_starv(::google::protobuf::uint32 value) {
  set_has_starv();
  starv_ = value;
}

// optional uint32 evasion = 21;
inline bool Village::has_evasion() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Village::set_has_evasion() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Village::clear_has_evasion() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Village::clear_evasion() {
  evasion_ = 0u;
  clear_has_evasion();
}
inline ::google::protobuf::uint32 Village::evasion() const {
  return evasion_;
}
inline void Village::set_evasion(::google::protobuf::uint32 value) {
  set_has_evasion();
  evasion_ = value;
}

// required bytes name = 22;
inline bool Village::has_name() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Village::set_has_name() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Village::clear_has_name() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Village::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Village::name() const {
  return *name_;
}
inline void Village::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Village::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Village::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Village::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Village::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 loyalty = 23;
inline bool Village::has_loyalty() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Village::set_has_loyalty() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Village::clear_has_loyalty() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Village::clear_loyalty() {
  loyalty_ = 0u;
  clear_has_loyalty();
}
inline ::google::protobuf::uint32 Village::loyalty() const {
  return loyalty_;
}
inline void Village::set_loyalty(::google::protobuf::uint32 value) {
  set_has_loyalty();
  loyalty_ = value;
}

// -------------------------------------------------------------------

// Villages

// repeated .entity.Village vil = 1;
inline int Villages::vil_size() const {
  return vil_.size();
}
inline void Villages::clear_vil() {
  vil_.Clear();
}
inline const ::entity::Village& Villages::vil(int index) const {
  return vil_.Get(index);
}
inline ::entity::Village* Villages::mutable_vil(int index) {
  return vil_.Mutable(index);
}
inline ::entity::Village* Villages::add_vil() {
  return vil_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::entity::Village >&
Villages::vil() const {
  return vil_;
}
inline ::google::protobuf::RepeatedPtrField< ::entity::Village >*
Villages::mutable_vil() {
  return &vil_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace entity

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_entity_2eproto__INCLUDED
